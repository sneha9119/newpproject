# Use a lightweight Alpine base image instead
FROM node:20-alpine

# Set the working directory in the container
WORKDIR /app

# Copy package.json and package-lock.json first for better caching
COPY Backend/package*.json /app/Backend/

WORKDIR /app/Backend

# Install dependencies
RUN npm install

# Copy the rest of the Backend directory
COPY Backend/ /app/Backend/

ARG PORT
ARG CORS_ORIGIN
ARG MONGODB_URI
ARG CLOUDINARY_CLOUD_NAME
ARG CLOUDINARY_API_KEY
ARG CLOUDINARY_API_SECRET
ARG GOOGLE_CLIENT_ID
ARG GOOGLE_CLIENT_SECRET
ARG GOOGLE_CALLBACK_URL
ARG JWT_SECRET
ARG EMAIL_ID
ARG APP_PASSWORD
ARG NODE_ENV=production
ARG VERCEL_URL=https://backend-5l3616x2m-snehas-projects-3f585613.vercel.app

# Set production callback URL for Google OAuth
ENV PROD_CALLBACK_URL=${VERCEL_URL}/auth/google/callback

# Write the environment variables to a .env file
RUN echo "PORT=${PORT}" > .env \
    && echo "CORS_ORIGIN=${CORS_ORIGIN}" >> .env \
    && echo "MONGODB_URI=${MONGODB_URI}" >> .env \
    && echo "CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME}" >> .env \
    && echo "CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY}" >> .env \
    && echo "CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET}" >> .env \
    && echo "GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}" >> .env \
    && echo "GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}" >> .env \
    && echo "GOOGLE_CALLBACK_URL=${NODE_ENV == 'production' ? PROD_CALLBACK_URL : GOOGLE_CALLBACK_URL}" >> .env \
    && echo "JWT_SECRET=${JWT_SECRET}" >> .env \
    && echo "EMAIL_ID=${EMAIL_ID}" >> .env \
    && echo "APP_PASSWORD=${APP_PASSWORD}" >> .env

# Expose the port 8000
EXPOSE 8000

# Run the Node.js application
CMD ["node", "src/index.js"]